/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&nice_view_spi {
  cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

#define BASE 0
#define NAV 1
#define NUM 2
#define FUN 3
#define SYM 4
#define MEDIA 5
#define MOUSE 6

/ {
        behaviours {
            hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                base_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "BASE"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T   |   |  Y  |  U   |  I  |  O  |  P  | Ü |
// | CTRL |  A  |  S  |  D  |  F  |  G   |   |  H  |  J   |  K  |  L  |  Ö  |  Ä   |
// | >| |  Z  |  X  |  C  |  V  |  B     |   |  N  |  M   |  ,  |  .  |  -  | RSHFT |
//     | MEDIA ESC | NAV SPC | MOUSE TAB |   | SYM RET | NUM BSPC  | FUN DEL |
                        bindings = <
   &kp TAB   &kp Q      &kp W          &kp E          &kp R           &kp T          &kp Y         &kp U         &kp I       &kp O   &kp P    &kp LBKT
   &kp LGUI  &kp A      &hm LALT S     &hm LCTRL D    &hm LSHFT F     &kp G          &kp H         &hm LSHFT J   &hm LCTRL K &hm RALT L   &kp SEMI &kp SQT
   &kp NUBS  &kp Z      &kp X          &kp C          &kp V           &kp B          &kp N         &kp M         &kp COMMA   &kp DOT &kp FSLH &kp RSHFT
                                       &lt MEDIA ESC  &lt NAV SPACE   &lt MOUSE TAB  &lt SYM RET   &lt NUM BSPC  &lt FUN DEL
                        >;
                };
                nav_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "NAV"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |  1 |  2  | 3  |  4  |  5  | 6  |   |  7  |  8  |  9  |  0 |  ß  | ´ |
// |     |     | LALT | LCTRL | LSHFT |   |   | LFT | DWN |  UP | RGT |     |      |
// | LSHFT |     |     |     |     |      |   | HOME | PG DN | PG UP | END |     |      |
//     | MEDIA ESC |         | MOUSE TAB  |   | SYM RET | NUM BSPC  | FUN DEL |
                        bindings = <
   &kp N1    &kp N2       &kp N3         &kp N4       &kp N5         &kp N6       &kp N7        &kp N8       &kp N9      &kp N0   &kp MINUS &kp EQUAL
   &trans     &trans    &kp LALT     &kp LCTRL      &kp LSHFT   &trans         &kp LEFT     &kp DOWN      &kp UP       &kp RIGHT   &trans   &trans
   &kp LSHFT  &trans    &trans       &trans         &trans       &trans         &kp HOME     &kp PG_DN     &kp PG_UP    &kp END     &trans   &kp RSHFT
                                     &lt MEDIA ESC  &trans       &lt MOUSE TAB  &lt SYM RET  &lt NUM BSPC  &lt FUN DEL
                        >;
                };

                num_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "NUM"                              ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |  / |  -  |  7  |  8  |  9  |  (  |   |  )  |  "  |  '  |  `  |  §  | BKSP |
// | *  |  +  |  4  |  5  |  6  |  {  |   |  }  |  LSHFT  |  LCTRL  |  LALT  |  LGUI  |      |
// | % |  ,  |  1  |  2  |  3  |  [   |   |  ]  |  !  |  =  |  &  |  ´|´  |  $   |
//            |    0    |   .   | ´   |   |  # |      | FUN DEL |
                        bindings = <
   &kp LS(N7)    &kp FSLH    &kp N7  &kp N8  &kp N9   &kp LS(N8)  &kp LS(N9)  &kp LS(N2)  &kp LS(NUHS)  &kp LS(EQL)  &kp LS(N3)    &kp BSPC
   &kp LS(RBKT)  &kp RBKT    &kp N4  &kp N5  &kp N6   &kp RA(N7)  &kp RA(N0)  &kp LSHFT   &kp LCTRL     &kp RALT     &kp LGUI      &trans
   &kp LS(N5)    &kp COMMA   &kp N1  &kp N2  &kp N3   &kp RA(N8)  &kp RA(N9)  &kp LS(N1)  &kp LS(N0)    &kp LS(N6)   &kp RA(NUBS)  &kp LS(N4)
                                     &kp N0  &kp DOT  &kp EQUAL   &kp NUHS    &trans      &lt FUN DEL
                        >;
                };
                fun_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "FUN"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |     |     |  F7  |  F8  |  F9  |  PSCRN  |   |     |        |        |       |       |     |
// |     |     |  F4  |  F5  |  F6  |  SLCK   |   |     |  LSHFT |  LCTRL |  LALT |  LGUI |      |
// |     |     |  F1  |  F2  |  F3  |  PAUSE  |   |     |        |        |       |       |      |
//                    |  F10 |  F11 |  F12    |   | SYM RET | NUM BSPC  |      |
                        bindings = <
   &trans  &trans  &kp F7  &kp F8   &kp F9   &kp PSCRN        &trans       &trans        &trans       &trans       &trans       &trans
   &trans  &trans  &kp F4  &kp F5   &kp F6   &kp SLCK         &trans       &kp LSHFT     &kp LCTRL    &kp RALT     &kp LGUI     &trans
   &trans  &trans  &kp F1  &kp F2   &kp F3   &kp PAUSE_BREAK  &trans       &trans        &trans       &trans       &trans       &trans
                           &kp F10  &kp F11  &kp F12          &lt SYM RET  &lt NUM BSPC  &trans
                        >;
                };
                sym_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "SYM"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |       |  -  |  /  |  (  |  )  |  (  |   |  )  |    ü   |   '    |  `    |  §    |      |
// |       |  #  |  $  |  %  |  &  |  {  |   |  }  |  LSHFT |  LCTRL |  LALT |  LGUI |      |
// | ^ |     |  !  |  "  |  §  |  [  |   |  ]  |   !    |   =    |   &   |  ´|´  |  $   |
//                     |  =  |  ?  |  ´  |   |     | NUM BSPC  | FUN DEL |
                        bindings = <
   &kp GRAVE    &kp LS(EQUAL)  &kp EQUAL   &kp LS(NUHS)   &kp LS(N2)     &kp COMMA      &kp DOT     &kp LS(COMMA)  &kp LS(DOT)  &trans        &kp LS(FSLH)  &kp RA(RBKT)
   &kp LS(RBKT) &kp RBKT       &kp NUBS    &kp RA(N7)     &kp LS(N8)     &kp RA(N8)     &kp RA(N9)  &kp LS(N9)     &kp RA(N0)   &kp LS(NUBS)  &kp FSLH      &kp LS(N7)
   &kp LS(N3)   &kp RA(E)      &kp LS(N4)  &kp LS(N6)     &kp RA(NUBS)   &kp LS(N1)     &kp LS(N0)  &kp LS(MINUS)  &kp NUHS     &kp RA(Q)     &kp LS(N5)    &kp RA(MINUS)
                                           &lt MEDIA ESC  &lt NAV SPACE  &lt MOUSE TAB  &trans      &lt NUM BSPC   &lt FUN DEL
                        >;
                };
                media_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "MEDIA"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |         |   |  R   |  M            |  H      |  S     |  V   |      |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5     |   | PREV |  VOL DN       | VOL UP  | NEXT   |  E   |      |
// |      |     |     |     |     |         |   |  O   |   0           |  1      |  2     |  3   |   4  |
//              |     | NAV SPC | MOUSE TAB |   | STOP | PLAY / PAUSE  | MUTE |
                        bindings = <
   &trans      &trans        &trans        &trans         &trans         &trans         &kp R       &kp M             &kp H         &kp S         &kp V       &trans
   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &kp C_PREV  &kp C_VOL_DN      &kp C_VOL_UP  &kp C_NEXT    &kp E       &trans
   &trans      &trans        &trans        &trans         &trans         &trans         &kp O       &kp  N0           &kp N1        &kp N2        &kp N3      &kp N4
                                           &trans         &lt NAV SPACE  &lt MOUSE TAB  &kp C_STOP  &kp C_PLAY_PAUSE  &kp C_MUTE
                        >;
                };
                mouse_layer {
// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
label= "MOUSE"                               ;
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |  REDO   |  PASTE        |  COPY   |  CUT   |  UNDO |  BSPC  |
// |     |     |     |     |     |     |   | PREV    |  VOL DN       | VOL UP  | NEXT   |  E    |        |
// |     |     |     |     |     |     |   |  O      |   0           |  1      |  2     |  3    |   4    |
//         | MEDIA ESC | NAV SPC |     |   | STOP    | PLAY / PAUSE  | MUTE |
                        bindings = <
   &trans  &trans  &trans  &trans         &trans         &trans    &kp K_REDO  &kp K_PASTE       &kp K_COPY    &kp K_CUT     &kp K_UNDO &kp BSPC
   &trans  &trans  &trans  &trans         &trans         &trans    &kp C_PREV  &kp C_VOL_DN      &kp C_VOL_UP  &kp C_NEXT    &kp E       &trans
   &trans  &trans  &trans  &trans         &trans         &trans    &kp O       &kp  N0           &kp N1        &kp N2        &kp N3     &kp N4
                           &lt MEDIA ESC  &lt NAV SPACE  &trans    &kp C_STOP  &kp C_PLAY_PAUSE  &kp C_MUTE
                        >;
                };
        };
};
